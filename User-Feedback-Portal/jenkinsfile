pipeline {
    agent any

    environment {
        IMAGE_NAME = "feedback-web"
        IMAGE_TAG = "latest"
        CONTAINER_NAME = "feedback-container"
        APP_PORT = "5000"
        HOST_PORT = "3000"
        APP_DIR = "User-Feedback-Portal"
    }

    options {
        skipStagesAfterUnstable()
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo ' Cloning repository...'
                checkout scm
                echo ' Code checkout completed.'
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('Backend Deps') {
                    steps {
                        echo ' Installing backend dependencies...'
                        sh '''
                            cd $APP_DIR/backend
                            npm install
                        '''
                        echo ' Backend dependencies installed.'
                    }
                }

                stage('Frontend Deps') {
                    steps {
                        echo ' Installing frontend dependencies...'
                        sh '''
                            cd $APP_DIR/frontend
                            npm install
                        '''
                        echo ' Frontend dependencies installed.'
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                echo ' Building frontend...'
                sh '''
                    cd $APP_DIR/frontend
                    npm run build || echo "Static HTML app detected — skipping build."
                    mkdir -p ../backend/public
                    cp index.html style.css ../backend/public/
                '''
                echo ' Frontend build and copy completed.'
            }
        }

        stage('Test Backend') {
            steps {
                echo ' Testing backend (basic start check)...'
                sh '''
                    cd $APP_DIR/backend
                    node -c server.js
                '''
                echo ' Backend syntax check passed.'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo ' Building Docker image...'
                sh '''
                    docker build -t $IMAGE_NAME:$IMAGE_TAG $APP_DIR
                '''
                echo ' Docker image built.'
            }
        }

        stage('Stop Old Container') {
            steps {
                echo ' Stopping and removing old container if exists...'
                sh '''
                    if [ $(docker ps -q -f name=$CONTAINER_NAME) ]; then
                        docker stop $CONTAINER_NAME
                        docker rm $CONTAINER_NAME
                    fi
                '''
                echo ' Old container cleaned up.'
            }
        }

        stage('Deploy New Container') {
            steps {
                echo ' Deploying new version of the container...'
                sh '''
                    docker run -d \
                    -p $HOST_PORT:$APP_PORT \
                    --name $CONTAINER_NAME \
                    $IMAGE_NAME:$IMAGE_TAG
                '''
                echo ' Container deployed.'
            }
        }

        stage('Cleanup Old Images') {
            steps {
                echo ' Cleaning up unused Docker resources...'
                sh '''
                    docker image prune -af || true
                    docker system prune -f --volumes || true
                '''
                echo ' Docker cleanup completed.'
            }
        }

    }

    post {
        success {
            echo " CI/CD pipeline completed successfully!"
        }
        failure {
            echo " Pipeline failed — check logs for details."
        }
    }
}
