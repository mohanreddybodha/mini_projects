pipeline {
    agent any

    environment {
        IMAGE_NAME = "feedback-web"
        IMAGE_TAG = "latest"
        CONTAINER_NAME = "feedback-container"
        APP_PORT = "5000"
        HOST_PORT = "3000"
        APP_DIR = "User-Feedback-Portal"
    }

    options {
        skipStagesAfterUnstable()
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo 'üì¶ Cloning repository...'
                checkout scm
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('Backend Deps') {
                    steps {
                        echo '‚öôÔ∏è Installing backend dependencies...'
                        sh '''
                            cd $APP_DIR/backend
                            npm install
                        '''
                    }
                }

                stage('Frontend Deps') {
                    steps {
                        echo '‚öôÔ∏è Installing frontend dependencies...'
                        sh '''
                            cd $APP_DIR/frontend
                            npm install
                        '''
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                echo 'üèóÔ∏è Building frontend...'
                sh '''
                    cd $APP_DIR/frontend
                    npm run build || echo "Static HTML app detected ‚Äî skipping build."
                    mkdir -p ../backend/public
                    cp index.html style.css ../backend/public/
                '''
            }
        }

        stage('Test Backend') {
            steps {
                echo 'üß™ Testing backend (basic start check)...'
                sh '''
                    cd $APP_DIR/backend
                    node -e "require('./server'); console.log('‚úÖ Backend loaded successfully')"
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                sh '''
                    docker build -t $IMAGE_NAME:$IMAGE_TAG $APP_DIR
                '''
            }
        }

        stage('Stop Old Container') {
            steps {
                echo 'üßπ Stopping and removing old container if exists...'
                sh '''
                    if [ $(docker ps -q -f name=$CONTAINER_NAME) ]; then
                        docker stop $CONTAINER_NAME
                        docker rm $CONTAINER_NAME
                    fi
                '''
            }
        }

        stage('Deploy New Container') {
            steps {
                echo 'üöÄ Deploying new version of the container...'
                sh '''
                    docker run -d \
                    -p $HOST_PORT:$APP_PORT \
                    --name $CONTAINER_NAME \
                    $IMAGE_NAME:$IMAGE_TAG
                '''
            }
        }

        stage('Cleanup Old Images') {
            steps {
                echo 'üßº Cleaning up old Docker images...'
                sh 'docker image prune -af || true'
            }
        }
    }

    post {
        success {
            echo "‚úÖ CI/CD pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed ‚Äî check logs for details."
        }
    }
}